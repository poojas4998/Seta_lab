# python - a snakemake file

import os
import glob


rule all:
	input:
	    expand("{genotype}_{condition}_{sample}_{readpair}_fastqc.zip",genotype = ["KO","WT"],condition = ["control","treatment"],sample = ["001","002","003","004","005"],readpair=["01","02"]),
		expand("{genotype}_{condition}_{sample}_{readpair}_trimmedreads.gz",genotype = ["KO","WT"],condition = ["control","treatment"],sample = ["001","002","003","004","005"],readpair=["01","02"]),
		expand("{genotype}_{condition}_{sample}_{readpair}_unpairedreads.gz",genotype = ["KO","WT"],condition = ["control","treatment"],sample = ["001","002","003","004","005"],readpair=["01","02"]),
        expand("{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam", genotype=["KO", "WT"], condition=["control", "treatment"], sample=["001", "002", "003", "004", "005"]),
        expand("{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam.bai", genotype=["KO", "WT"], condition=["control", "treatment"], sample=["001", "002", "003", "004", "005"]),
        expand("{genotype}_{condition}_{sample}.bam.flagstat", genotype=["KO", "WT"], condition=["control", "treatment"], sample=["001", "002", "003", "004", "005"]),
        "featureCounts.txt",
        "featureCounts.txt.summary",
        "gene_data_snake.csv"
        
        

rule rawFASTQC:
	input:
		rawreads = "{genotype}_{condition}_{sample}_{readpair}.gz"                        # data/path
	output:
		zip = "{genotype}_{condition}_{sample}_{readpair}_fastqc.zip",                    # comma 
		html= "{genotype}_{condition}_{sample}_{readpair}_fastqc.html"
	threads:
		4                       														 
	shell:
		"""
		fastqc -t {threads} {input.rawreads} 
		"""
		
rule trimmomatic:
    input:
        adaptaters ="TruSeq3-PE.fa",
        forward_read = "{genotype}_{condition}_{sample}_01.gz",
        reverse_read = "{genotype}_{condition}_{sample}_02.gz"
    output:
        forward_paired = "{genotype}_{condition}_{sample}_01_trimmedreads.gz",
        forward_unpaired = "{genotype}_{condition}_{sample}_01_unpairedreads.gz",
        reverse_paired = "{genotype}_{condition}_{sample}_02_trimmedreads.gz",
        reverse_unpaired = "{genotype}_{condition}_{sample}_02_unpairedreads.gz"
    threads:
        16
    shell:
        """
        trimmomatic PE -threads {threads} -phred33 {input.forward_read} {input.reverse_read} {output.forward_paired} {output.forward_unpaired} {output.reverse_paired} {output.reverse_unpaired} ILLUMINACLIP:{input.adaptaters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15
        """

rule getGenomefasta:																						  # no input file
	output:
		genome_fasta = "GRCm39.primary_assembly.genome.fa.gz"
	shell:
		"""
		wget https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M32/GRCm39.primary_assembly.genome.fa.gz
		"""

rule getGenomegtf:																						  # no input file
	output:
		genome_gtf = "gencode.vM32.primary_assembly.annotation.gtf.gz"
	shell:
		"""
		wget https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M32/gencode.vM32.primary_assembly.annotation.gtf.gz
		"""
         # https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M32/gencode.vM32.chr_patch_hapl_scaff.basic.annotation.gtf.gz old one
         # https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M32/gencode.vM32.primary_assembly.basic.annotation.gtf.gz
		
rule starIndex:
    input:
        genome_fasta="GRCm39.primary_assembly.genome.fa",
        genome_gtf="gencode.vM32.primary_assembly.annotation.gtf"
    params:
        dir = "GRCm39STAR/"
    output:
        touch("STARIndex.done")
    threads: 16
    shell:
        """
        STAR --runThreadN {threads} --runMode genomeGenerate --genomeDir {params.dir} --genomeFastaFiles {input.genome_fasta} --sjdbGTFfile {input.genome_gtf} --sjdbOverhang 100 
        """

rule starMapping_pass1:
    input:
        forward_paired="{genotype}_{condition}_{sample}_01_trimmedreads.gz",
        reverse_paired="{genotype}_{condition}_{sample}_02_trimmedreads.gz",
    params:
        prefix="{genotype}_{condition}_{sample}.",
        dir = "GRCm39STAR/"
    output:
        bamfile="{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam"
    threads: 20
    shell:
        """
        STAR --runThreadN {threads} --genomeDir {params.dir} --outFileNamePrefix {params.prefix} --readFilesIn {input.forward_paired} {input.reverse_paired} --outSAMtype BAM SortedByCoordinate --readFilesCommand zcat
        """

# STAR --runThreadN 20 --genomeDir GRCm39STAR --readFilesIn KO_control_002_01_trimmedreads.gz KO_control_002_02_trimmedreads.gz --readFilesCommand zcat --outSAMtype BAM SortedByCoordinate --outFileNamePrefix KO_control_002_02.

# Indexing Bam files

rule samtools_index:
    input:
        bam_file="{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam"
    output:
        bam_index="{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam.bai"
    shell:
        """
        samtools index {input.bam_file}
        """


# run multiqc at the end. add the -f flag to force overwrite. otherwise it wont overwrite already written files. - rnaseq- exonic region. mRNA.

rule multiQC:
    input:
        input_data = expand("{genotype}_{condition}_{sample}_{readpair}_fastqc.html",genotype=["KO", "WT"],condition=["control", "treatment"],sample=["001", "002", "003", "004", "005"],readpair=["01", "02"]),
    output:
        output_name = "multiqc_report.html"
    params:
        dir = "multiqc_report/"
    shell:
        """
        multiqc . --force 
       """
        
# dont need expand, it can be run individually, without "expand". because previous samples dont need to be indexed for the bambai to run.
# multiqc, expand is necessary because we have to wait for all the previous samples to be finished

rule samtools_flagstat:
    input:
        bam_index = "{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam"
    output:
        flagstat_file = "{genotype}_{condition}_{sample}.bam.flagstat"
    log:
        "{genotype}_{condition}_{sample}.log"
    shell:
        """
        samtools flagstat {input.bam_index} > {output.flagstat_file}
        """

# expand here , will make a list ! this command will not run propeerly with expand, makes a list. feature counts works on individ files.
# multiext("{genotype}_{condition}_{sample}",".featureCounts",".featureCounts.summary",".featureCounts.jcounts")
        #fc_summary = "featureCounts.summary",
        #fc_jcounts = "featureCounts.jcounts"
        
# wget https://github.com/ShiLab-Bioinformatics/subread/releases/download/2.0.2/subread-2.0.2-Linux-x86_64.tar.gz
# tar xvfz subread-2.0.2-Linux-x86_64.tar.gz
# [prj4998@scc2 data]$ mkdir apps
# [prj4998@scc2 data]$ mv -v subread-2.0.2-Linux-x86_64 apps/subread
 #featureCounts -T 2 -a gencode.vM32.primary_assembly.annotation.gtf -o featureCounts.txt KO_control_001.Aligned.sortedByCoord.out.bam  
 #featureCounts -p -T 2 -a gencode.vM32.primary_assembly.annotation.gtf -o featureCounts.txt KO_control_001.Aligned.sortedByCoord.out.bam

rule featureCounts:
    input:
        bam_files = expand("{genotype}_{condition}_{sample}.Aligned.sortedByCoord.out.bam", genotype=["KO", "WT"], condition=["control", "treatment"], sample=["001", "002", "003", "004", "005"]),
    params:
        annotation = "gencode.vM32.primary_assembly.annotation.gtf"
    output:
        feature_counts_file = "featureCounts.txt",
        fc_summary = "featureCounts.txt.summary"
    threads: 8
    shell:
        """
        featureCounts -p -T {threads} -a {params.annotation} -o {output.feature_counts_file} {input.bam_files}
        """

rule gtf_convert:
    input:
        gtf_input = "gencode.vM32.primary_assembly.annotation.gtf"
    output:
        gene_output = "gene_data_snake.csv"
    run:
        import re
        import csv

        def parse_gtf_file(file_path):
            gene_data = {}

            with open(file_path, 'r') as gtf_file:
                for line in gtf_file:
                    if line.startswith('#'):
                        continue

                    attributes = re.findall(r'(\w+)\s+\"(.*?)\"', line)
                    record = dict(attributes)

                    gene_id = record.get('gene_id')
                    gene_name = record.get('gene_name')

                    if gene_id and gene_name:
                        if gene_id in gene_data:
                            continue

                        gene_data[gene_id] = {'gene_id': gene_id, 'gene_name': gene_name}

            return list(gene_data.values())

        def write_to_csv(data, output_file):
            with open(output_file, 'w', newline='') as csv_file:
                writer = csv.writer(csv_file)
                writer.writerow(['Gene ID', 'Gene Name'])
                for record in data:
                    writer.writerow([record['gene_id'], record['gene_name']])

        parsed_data = parse_gtf_file(input.gtf_input)

        write_to_csv(parsed_data, output.gene_output)
    

   
    
    
    
    
    
    
    
    
    
    
    
